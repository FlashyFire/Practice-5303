/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pract;

import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Asus-PC
 */
public class Help extends javax.swing.JFrame {

    private String[] items = {
    "Работа с главным окном",
    "Работа с окном графа",
    "Генерация",
    "Список инцидентности"
};
    /**
     * Creates new form Help
     */
    public Help() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(null);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
         DefaultComboBoxModel<String> cbModel = new DefaultComboBoxModel<String>();
         for (int i = 0; i < items.length; i++) 
            cbModel.addElement((String)items[i]);
         jComboBox1.setModel(cbModel);
         if (((String)jComboBox1.getSelectedItem()).equals(items[0]))
         {
             String t=items[0];
             t+=":\nДля изменения количества вершин в графе, введите нужное\nкол-во вершин в соответствующее текстовое поле.\n\nДля изменения/добавления/удаления ребра измените число\n"
                     + "в ячейке [i][j], где i - номер вершины откуда идёт ребро, j - но-\nмер вершины куда идёт ребро.\n\n"+"Чтобы открыть окно с графом нажмите на кнопку 'Показать\nграф'.\n\n";
             t+="Чтобы ввести матрицу смежности из файла нажмите 'Файл'->\n'Прочитать из файла' и выберите нужный.\n\n"+"Чтобы сохранить матрицу смежности в файл нажмите 'Файл'\n->'Сохранить в файл"
                     + "' и выберите нужный.\n\n";
             t+="Чтобы Сгенерировать новый граф нажмите 'Граф'->'Сгенери-\nровать...' и введите требуемые характеристики генерируемого\nграфа. Подробнее в п.Генерация\n\n";
             t+="Чтобы задать граф списком инцидентности нажмите 'Граф'\n->'Задать граф списком инцидентности'. Подробнее в \nп.Список инцидентности\n\n";
             jTextArea1.setText(t);
         }       
         
        //jComboBox1.setModel();
        
        //jComboBox1.setModel();
    }//GEN-LAST:event_formWindowOpened

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (((String)jComboBox1.getSelectedItem()).equals(items[0]))
         {
             String t=items[0];
             t+=":\nДля изменения количества вершин в графе, введите нужное\nкол-во вершин в соответствующее текстовое поле.\n\nДля изменения/добавления/удаления ребра измените число\n"
                     + "в ячейке [i][j], где i - номер вершины откуда идёт ребро, j - но-\nмер вершины куда идёт ребро.\n\n"+"Чтобы открыть окно с графом нажмите на кнопку 'Показать\nграф'.\n\n";
             t+="Чтобы ввести матрицу смежности из файла нажмите 'Файл'->\n'Прочитать из файла' и выберите нужный.\n\n"+"Чтобы сохранить матрицу смежности в файл нажмите 'Файл'\n->'Сохранить в файл"
                     + "' и выберите нужный.\n\n";
             t+="Чтобы Сгенерировать новый граф нажмите 'Граф'->'Сгенери-\nровать...' и введите требуемые характеристики генерируемого\nграфа. Подробнее в п.Генерация\n\n";
             t+="Чтобы задать граф списком инцидентности нажмите 'Граф'\n->'Задать граф списком инцидентности'. Подробнее в \nп.Список инцидентности\n\n";
             jTextArea1.setText(t);
         } else {
             if (((String)jComboBox1.getSelectedItem()).equals(items[1]))
             {
                 String t=items[1];
                 t+=":\nЧтобы сохранить матрицу кратчайших путей на любом шаге в \nфайл нажмите 'Файл'->'Сохранить в файл"
                     + "' и выберите нужный.\n\n";
                 t+="Управление визуализацией алгоритма:\n'Пуск' - начать или продолжить работу алгоритма;\n'Пауза' - остановить работу алгоритма;";
                 t+="\n'Пропустить' - пропустить визуализацию алгоритма и получить \nматрицу кратчайших путей;\n'Заново' - обнулить работу алгоритма;";
                 t+="\n'Следующий' - перейти к следующему шагу алгоритма;\n";
                 t+="\nПри работе алгоритма сравниваются пути из синей вершины в \nоранжевую через красную вершину. Если ребра между двумя \nвершинами нет, то синюю и оранжевую при визуализации \nсоединяет желтая линия, а пары вершин синяя-красная и \nкрасная-оранжевая - голубая.\n";
                 t+="Если ребро есть, то желтая линия становится оранжевой, а \nголубая - темно-синей.\n";
                 t+="Если сумма весов синих ребер меньше веса оранжевого, \nто эта сумма записывается в матрицу кратчайших путей как \nкратчайший путь между синей и оранжевой вершинами.\n";
                 jTextArea1.setText(t);
             }
             else
                 if (((String)jComboBox1.getSelectedItem()).equals(items[2]))
                 {
                     String t=items[2];
                     t+=":\nЧтобы Сгенерировать новый граф нажмите 'Граф'->'Сгенерир-\nовать...' и введите требуемые характеристики генерируемого\nграфа.\n\n";
                     t+="При генерации графа нужно указать количество вершин графа\nи максимальный вес ребер в соответствующих полях и нажать \nкнопку 'ОК'.\n";
                     t+="Количество вершин должно быть указано в пределах от 2 до \n20, а вес - от 1 до 100. Ребра с отрицательным весом не \nгенерируются.\n\n";
                     t+="При нажатии кнопки 'Отмена' окно закроется и граф не будет \nсгенерирован.\n\n";
                    jTextArea1.setText(t);
                 }
                 else
                     if (((String)jComboBox1.getSelectedItem()).equals(items[3]))
                 {
                     String t=items[3];
                     t+=":\nЧтобы задать граф списком инцидентности нажмите 'Граф'\n->'Задать списком инцидентности'.\n\n";
                     t+="В открывшемся окне введите количество вершин графа в \nсоответствующем поле, заполните таблицу и нажмите кнопку \n'ОК'.\n";
                     t+="Столбцы i и j таблицы заполняются автоматически, где i - вер-\nшина, из которой ребро исходит, а j - вершина, в которую ребро\nвходит.\n";
                     t+="Столбцы w(вес ребра) заполняются пользователем. Для до-\nбавления ребра введите в ячейку целое число отличное от\nнуля.\n\n";
                     t+="При нажатии кнопки 'Отмена' окно закроется и список \nинцидентности не будет задан.\n\n";
                    jTextArea1.setText(t);
                 
                 }
         }
    }//GEN-LAST:event_jComboBox1ActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
